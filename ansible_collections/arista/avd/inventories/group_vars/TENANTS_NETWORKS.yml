---
# DC Tenants (Customers)
# Documentation of Tenant/Customer specific information - Vlans/VRFs
tenants:
  # Tenant A Specific Information - VRFs / VLANs
  Default:
    mac_vrf_vni_base: 30000
    enable_mlag_ibgp_peering_vrfs: true
    vrfs:
      default:
        vrf_vni: 1
        svis:
          67:
            name: Default
            description: SVI for VLAN 67
            # i wonder if these tags are the L3 SVI and L2 VLAN based on filters applied to node_types
            tags: [DC1-POD1-VLAN-67]
            enabled: true
            # anycast
            ip_address_virtual: 10.0.100.1/24
            ip_helpers: [10.0.100.10, 10.1.100.10]
            igmp_snooping_enabled: true
          68:
            name: Default
            description: SVI for VLAN 68
            # i wonder if these tags are the L3 SVI and L2 VLAN based on filters applied to node_types
            tags: [DC1-POD2-VLAN-68]
            enabled: true
            # anycast
            ip_address_virtual: 10.0.200.1/24
            ip_helpers: [10.0.200.10, 10.1.200.10]
            igmp_snooping_enabled: true
  Cust_A:
    mac_vrf_vni_base: 10000
    # MLAG IBGP peering per VRF | Optional
    # By default an IBGP peering is configured per VRF between MLAG peers on separate VLANs.
    # Setting enable_mlag_ibgp_peering_vrfs: false under tenant will change this default
    # to prevent configuration of these peerings and VLANs for all VRFs in the tenant.
    # This setting can be overridden per VRF.
    enable_mlag_ibgp_peering_vrfs: true
    vrfs:
      Cust_A_VRF:
        vrf_vni: 100
        #        ip_helpers:
        #          < IPv4 dhcp server IP >:
        #            source_interface: < interface-name >
        #            source_vrf: < VRF to originate DHCP relay packets to DHCP server. If not set, uses current VRF >
        svis:
          100:
            name: Cust_A_Data
            description: optional for svi instead of vlan name
            # i wonder if these tags are the L3 SVI and L2 VLAN based on filters applied to node_types
            tags: [Cust_A_opzone]
            enabled: true
            # anycast
            ip_address_virtual: 10.0.10.1/24
            ip_helpers: [10.0.10.10, 10.1.10.10]
            igmp_snooping_enabled: true
            vxlan: true
            structured_config:
              description: set from structured_config on svi (was Cust_A_OP_Zone_1)
              # Everyone gets this, the node list calls out special configuration
              #            nodes:
              #              DC1-POD1-LEAF2A:
              #                structured_config:
              #                  description: set from structured_config on svi for DC1-POD1-LEAF2A (was Cust_A_OP_Zone_1)
          167:
            #            vni_override: 50111
            name: Cust_A_M2C2
            tags: [Cust_A_opzone]
            ip_address_virtual: 10.1.11.1/24
            ip_helpers:
              - 10.1.11.10
          "133":
            #            vni_override: 50112
            name: Cust_A_OP_M2
            tags: [Cust_A_opzone]
            enabled: true
            ip_address_virtual: 10.1.12.1/24
            ip_helpers:
              - 10.1.12.10
            raw_eos_cli: |
              comment
              Comment created from raw_eos_cli under SVI 112 in VRF Common_VRF
              EOF
            vxlan: true
    # These are pure L2 vlans - so no SVI on l3leafs
    l2vlans:
      "666":
        #        vni_override: 2500
        name: bitbucket
        tags: [bitbucket]
        vxlan: false
      "999":
        #        vni_override: 2600
        name: vmotion
        tags: [vmotion]
        vxlan: false
  Cust_B:
    mac_vrf_vni_base: 20000
    enable_mlag_ibgp_peering_vrfs: true
    vrfs:
      Cust_B_VRF:
        vrf_vni: 200
        svis:
          "200":
            name: Cust_B_Data
            tags: [Cust_B_opzone]
            enabled: true
            ip_address_virtual: 10.32.1.1/24
            ip_helpers:
              - 10.32.1.10
            structured_config:
              description: set from structured_config on svi (was Cust_B_OP_Zone_1)
          "267":
            #            vni_override: 50211
            name: Cust_B_M2C2
            tags: [Cust_B_opzone]
            ip_address_virtual: 10.32.11.1/24
            ip_helpers:
              - 10.32.11.10
          "233":
            #            vni_override: 50212
            name: Cust_B_M2
            tags: [Cust_B_opzone]
            enabled: true
            ip_address_virtual: 10.32.12.1/24
            ip_helpers:
              - 10.32.12.10

#    l2vlans:
#      "2520":
#        vni_override: 2500
#        name: web-l2-vlan
#        tags: [web]
# List of L3 interfaces | Optional.
# This will create IP routed interface inside VRF. Length of interfaces, nodes and ip_addresses must match.
#    l3_interfaces:
#      - interfaces: [ Vlan67, Vlan211 ]
#        ip_addresses: [ 10.32.1.1/24, 10.32.11.1/24 ]
#        nodes: [ DC2-POD1-LEAF4A, DC2-POD1-LEAF4B ]
#        description: UnderCustBVRFL3_Interfaces
#        enabled: true
#        mtu: 9000
# EOS CLI rendered directly on the Ethernet interface in the final EOS configuration
#        raw_eos_cli: |
#          < multiline eos cli >
# Custom structured config added under ethernet_interfaces.<interface> for eos_cli_config_gen
#        structured_config: < dictionary >
# For sub-interfaces the dot1q vlan is derived from the interface name by default, but can also be specified.
#      - interfaces: [ <interface_name1.sub-if-id>, <interface_name2.sub-if-id> ]
#        encapsulation_dot1q_vlan: [ <vlan id>, <vlan id> ]
#        ip_addresses: [ <IPv4_address/Mask>, <IPv4_address/Mask> ]
#        nodes: [ < node_1 >, < node_2 > ]
#        description: < description >
#        enabled: < true | false >
#        mtu: < mtu - should only be used for platforms supporting mtu per subinterface >

# Dictionary of static routes | Optional.
# This will create static routes inside the tenant VRF.
# If nodes are not specified, all l3leafs that carry the VRF will also be applied the static routes.
# If a node has a static route in the VRF, redistribute static will be automatically enabled in that VRF.
# This automatic behavior can be overridden non-selectively with the redistribute_static knob for the VRF.
#    static_routes:
#      - destination_address_prefix: < IPv4_address/Mask >
#        gateway: < IPv4_address >
#        distance: < 1-255 >
#        tag: < 0-4294967295 >
#        name: < description >
#        metric: < 0-4294967295 >
#        interface: < interface >
#        nodes: [ < node_1 >, < node_2 >]

# Non-selectively enabling or disabling redistribute static inside the VRF | Optional.
#        redistribute_static: < true | false >
